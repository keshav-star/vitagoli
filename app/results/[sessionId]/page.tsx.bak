'use client';

import { GlassCard, Button, LoadingCard, GradientText } from '@/components/ui';
import connectDB from '@/lib/mongo';
import QuizResult from '@/models/QuizResult';
import Link from 'next/link';
import { ShareButton } from '@/components/share-button';
import { motion } from 'framer-motion';

const pageVariants = {
  initial: { opacity: 0 },
  enter: { 
    opacity: 1,
    transition: {
      staggerChildren: 0.2,
      when: 'beforeChildren',
    }
  },
};

const itemVariants = {
  initial: { opacity: 0, y: 20 },
  enter: { opacity: 1, y: 0 },
};

async function getQuizResult(sessionId: string) {
  try {
    await connectDB();
    const result = await QuizResult.findById(sessionId);
    if (!result) return null;
    return result;
  } catch (error) {
    console.error('Error fetching quiz result:', error);
    return null;
  }
}

export default async function ResultPage(props: { params: { sessionId: string } }) {
  const { sessionId } = await props.params;
  const result = await getQuizResult(sessionId);

  if (!result) {
    return (
      <QuizLayout>
        <Card gradient>
          <LoadingCard message="Loading quiz results..." />
        </Card>
      </QuizLayout>
    );
  }

  const scorePercentage = (result.score / 5) * 100;
  const isExcellent = scorePercentage >= 80;
  const isGood = scorePercentage >= 60;

  return (
    <QuizLayout>
      <div className="max-w-4xl mx-auto px-4">
        <Card gradient className="mb-6">
          <div className="space-y-8 p-6">
            {/* Header */}
            <div className="text-center">
              <h1 className="text-3xl font-bold mb-2">Quiz Results</h1>
              <p className="text-gray-600">Topic: {result.topic}</p>
            </div>

            {/* Score Circle */}
            <div className="flex justify-center">
              <div className="relative w-48 h-48">
                <svg className="w-full h-full" viewBox="0 0 100 100">
                  {/* Background circle */}
                  <circle
                    cx="50"
                    cy="50"
                    r="45"
                    fill="none"
                    stroke="#e2e8f0"
                    strokeWidth="8"
                  />
                  {/* Score circle */}
                  <circle
                    cx="50"
                    cy="50"
                    r="45"
                    fill="none"
                    stroke="url(#gradient)"
                    strokeWidth="8"
                    strokeLinecap="round"
                    strokeDasharray={`${scorePercentage * 2.827}, 282.7`}
                    transform="rotate(-90 50 50)"
                  />
                  <defs>
                    <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                      <stop offset="0%" stopColor="#6366f1" />
                      <stop offset="100%" stopColor="#a855f7" />
                    </linearGradient>
                  </defs>
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-purple-600">
                      {result.score}/5
                    </div>
                    <div className="text-sm text-gray-500">points</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Feedback */}
            <div className="bg-white/50 rounded-xl p-6 backdrop-blur-sm">
              <h3 className="text-xl font-semibold mb-3 flex items-center">
                {isExcellent ? 'üåü' : isGood ? 'üëç' : 'üí™'} Feedback
              </h3>
              <div className="prose prose-slate max-w-none">
                {result.feedback.split('\n').map((paragraph: string, i: number) => (
                  paragraph.trim() && (
                    <p key={i} className="text-gray-700 leading-relaxed mb-4">
                      {paragraph}
                    </p>
                  )
                ))}
              </div>
            </div>

            {/* Questions Review */}
            <div className="space-y-6">
              <h3 className="text-xl font-semibold">Question Review</h3>
              {result.questions.map((q: { question: string, options: string[], correctAnswer: string }, i: number) => (
                <div key={i} className="bg-white/50 rounded-xl p-6 backdrop-blur-sm">
                  <p className="font-medium mb-4">{q.question}</p>
                  <div className="space-y-2">
                    {q.options.map((option: string, j: number) => {
                      const isCorrect = option === q.correctAnswer;
                      const isUserAnswer = option === result.answers[i];
                      const bg = isCorrect
                        ? 'bg-green-100'
                        : isUserAnswer && !isCorrect
                        ? 'bg-red-100'
                        : 'bg-white/80';
                      const border = isCorrect
                        ? 'border-green-500'
                        : isUserAnswer && !isCorrect
                        ? 'border-red-500'
                        : 'border-transparent';

                      return (
                        <div
                          key={j}
                          className={`p-3 rounded-lg border-2 flex items-center ${bg} ${border}`}
                        >
                          <span className="flex-grow">{option}</span>
                          {isCorrect && (
                            <span className="text-green-600">‚úì</span>
                          )}
                          {isUserAnswer && !isCorrect && (
                            <span className="text-red-600">‚úó</span>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              ))}
            </div>

            {/* Actions */}
            <div className="flex justify-center space-x-4">
              <Link href="/quiz/start" className="inline-flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-gradient-to-r from-indigo-500 to-purple-600 hover:from-indigo-600 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Take Another Quiz
              </Link>
              <ShareButton topic={result.topic} score={result.score} />
            </div>
          </div>
        </Card>
      </div>
    </QuizLayout>
  );
}